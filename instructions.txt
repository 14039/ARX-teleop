Agora setup info:
Current Agora credentials are based on nate@vassarrobotics.com agora account. They should be (as of 250801):
Project Name: teleop-stream-1
App ID: d1b381fe495547cc867a343c1eceef5d
Primary Certificate: db2813337e8b46bcb271cd544f19bd63
Temp Token Channel Name: nate-rnd-250804
Temp Token: 007eJxTYJD7UxMYwmq62WDvmX+iQpkHJW5veC207X3kJd5VXd1Zp+IUGFIMk4wtDNNSTSxNTU3Mk5MtzMwTjU2Mkw1Tk1NT00xTrB5NyGgIZGRYv9+ZkZEBAkF8foa8xJJU3aK8FF0jUwMLAxMGBgDySyNg


- Tokens expire - regenerate if you get "CAN_NOT_GET_GATEWAY_SERVER" errors


ARX via Keyboard Control:
===========================

## Prerequisites
- ARX R5 arm connected via CAN adapter and powered on
- Python 3 with numpy installed
- CAN interface tools installed (`sudo apt install can-utils`)
- ARX libraries available (included in arx_control/lib/)

## Quick Start

### 1. Set up CAN interface
```bash
# Find your CAN adapter device (usually /dev/ttyACM0 or /dev/ttyACM1)
ls /dev/ttyACM*

# Set up CAN interface (replace /dev/ttyACM0 with your device)
sudo slcand -o -f -s8 /dev/ttyACM2 can0
sudo ip link set can0 up
```

### 2. ARX libraries are pre-built
The ARX libraries are already included in `arx_control/lib/`. No build step required!

### 3. Set up environment and run

#### Option A: Use the provided launcher script (recommended)
```bash
# Simply run the launcher script which handles all environment setup
./run_keyboard_control.sh
```

#### Option B: Manual setup
```bash
# Set up library paths
export LD_LIBRARY_PATH=/home/vassar/code/ARX-teleop/arx_control/lib/arx_r5_src:$LD_LIBRARY_PATH
export PYTHONPATH=/home/vassar/code/ARX-teleop/arx_control/lib/arx_r5_python:$PYTHONPATH

# Run keyboard control
python3 test_arx_via_keyboard.py
```

## Keyboard Controls

Once the program is running, use these keys to control the arm:

**Movement:**
- `w/s` - Move forward/backward (X axis)
- `a/d` - Move left/right (Y axis)
- `↑/↓` arrows - Move up/down (Z axis)
- `←/→` arrows - Also move left/right (Y axis)

**Rotation:**
- `m/n` - Rotate roll
- `l/.` - Rotate pitch  
- `,//` - Rotate yaw

**Gripper:**
- `c` - Close gripper
- `o` - Open gripper

**Other:**
- `i` - Enable gravity compensation mode
- `r` - Return to home position
- `q` - Quit program

## Troubleshooting

- **Import errors**: 
  - If you get "Failed to import arx_r5_python", check that the libraries exist in `arx_control/lib/`
  - Use the provided `run_keyboard_control.sh` script which sets all paths correctly
  - Or manually set: `export LD_LIBRARY_PATH=/home/vassar/code/ARX-teleop/arx_control/lib/arx_r5_src:$LD_LIBRARY_PATH`
- **CAN connection errors**: Check CAN interface with `ip link show can0`
- **Movement errors**: Try gravity compensation mode first with 'i'
- **Permission errors**: You may need sudo for CAN interface setup
- **ifconfig not found**: Use `sudo ip link set can0 up` instead of `sudo ifconfig can0 up`

## Configuration

Edit the arm_config in test_arx_via_keyboard.py:
- can_port: "can0" (or your CAN interface)
- type: 1 for R5 robot, 0 for X5lite


Using Feetech Servos to Teleoperate an ARX arm:

Make the following changes:
 - Refactor the teleoperate_leader_remote and follower_remote to only control a single arm (IE, 1 pair of leader/follower) -- leave comments where you remove the dual-functuiaonlity, so it can easily be added back in. Do this change in a NEW file, called teleop_single_arx_leader/follower.py (leave the current files as-is). P.S. - switching to 1 arm instead of 2 should dramatically simplify the script. Embrace that simplification. For example, we don't need self.followers = [list of follower controllers] as part of the class now that there's only 1 object. Remove "bureacracy"

  - Know that the # of servos (motor_ids) is being increased by 1, so if there is anywhere in comments or code that this be refelcted, make that change

   - In the new teleop_follower_remote, replace the motors from SO101Controllers to single_arm.py (ARX arms). Make sure that calls like self.apply_positions(self.telemetry_listener.latest_data) are adapted for to now go from "SO101Arm" objects, in the form of servo positions from the leader arm, to ARX arm positions, based on the ARX code in single_arm.py and the example in test_arx_via_keyboard, so get it to arm.set_joint_positions(q_smoothed). Depending on your preference, you may consider something like add read_joint_tics() and write_joint_tics() thin wrappers around get_joint_positions / set_joint_positions. 

    - Rename / refactor the ARX single_arm.py class to ARXArm